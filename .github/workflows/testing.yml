name: Unit Tests

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: 3.11

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v4
      with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: 2.1.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true

    - name: Configure poetry
      if: steps.cached-poetry.outputs.cache-hit == 'true'
      run: |
        poetry config virtualenvs.in-project true
        poetry config virtualenvs.in-project true
        poetry config virtualenvs.path .venv
        poetry config installer.parallel true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --without dev,ui,docs

    - name: Install library
      run: poetry install --no-interaction --only-root

    - name: Freeze dependencies
      run: poetry run pip freeze

    - name: Run tests
      run: poetry run pytest

    - name: Run tutorial scripts
      run: |
        expected_failures=(
          tutorial/qasm_thru_service.py
        )

        is_expected_to_fail() {
          for expected in "${expected_failures[@]}"; do
            if [[ "$1" == "$expected" ]]; then
              return 0
            fi
          done
          return 1
        }

        for file in tutorials/*.py; do
          echo "üîπ Running $file"

          if is_expected_to_fail "$file"; then
            echo "‚ö†Ô∏è Expecting failure for $file"
            if poetry run python "$file"; then
              echo "‚ùå $file was expected to fail but passed"
              exit 1
            else
              echo "‚úÖ $file failed as expected"
            fi
          else
            if ! poetry run python "$file"; then
              echo "‚ùå $file failed unexpectedly"
              exit 1
            else
              echo "‚úÖ $file passed"
            fi
          fi
        done
